{"version":3,"sources":["components/header/Header.js","layouts/modal/ModalSuccess.js","layouts/modal/ModalFailed.js","components/stack/StackView.js","App.js","serviceWorker.js","locales/i18n.js","index.js"],"names":["Header","state","walletAddress","apiConnectWallet","a","window","ethereum","request","method","then","res","console","log","JSON","stringify","setState","open","className","Navbar","collapseOnSelect","expand","Container","fluid","Brand","as","Link","to","Form","this","Button","variant","size","onClick","Badge","Component","ModalSuccess","Modal","aria-labelledby","centered","show","props","modalSuccessForm","modalShow","Body","Row","Col","icon","faCheckCircle","successMsg","dynamicSetForm","Constant","ModalFailed","modalFailedForm","faTimesCircle","errMsg","StackView","accountInfo","availableCandy","stakedCandy","staked","stakedDays","nftInfoList","isPlaced","numCandy","mediaController","queries","sm","md","lg","matches","layoutDynamicCandyBox","map","value","index","src","process","actionCandyPlace","length","actionAddNewNftInfoObject","setAccountInfo","type","formObject","concat","actionStack","splice","actionMintZombie","style","display","justifyContent","App","basename","path","component","withNamespaces","Boolean","location","hostname","match","resources","en","translation","cn_simp","cn_trad","i18n","use","reactI18nextModule","init","lng","keySeparator","interpolation","escapeValue","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.afd01626.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Badge from \"react-bootstrap/Badge\";\r\nimport Navbar from \"react-bootstrap/Navbar\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass Header extends Component {\r\n  state = {\r\n    walletAddress: \"\",\r\n  }\r\n\r\n  componentDidMount() {\r\n    // this.apiConnectWallet();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"\">\r\n        <Navbar collapseOnSelect expand=\"lg\" className=\"navbar-bg-orange navbar-height\" >\r\n          <Container fluid>\r\n            <Navbar.Brand as={Link} to=\"/\">\r\n              <h3>Spooky Birds</h3>\r\n            </Navbar.Brand>\r\n            \r\n            <Form className=\"\">\r\n              {this.state.walletAddress == \"\" ? \r\n              <Button\r\n                className=\"\"\r\n                variant=\"secondary\"\r\n                size=\"sm\"\r\n                onClick={() => this.apiConnectWallet()}\r\n              >\r\n              Login\r\n              </Button>: \r\n              <Badge className=\"badge-bg-gray-8 font-size-1\">\r\n                {this.state.walletAddress}\r\n              </Badge>}\r\n              \r\n            </Form>\r\n          </Container>\r\n        </Navbar>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // API function\r\n  apiConnectWallet = async () => {\r\n    if (typeof window.ethereum !== 'undefined') {\r\n      let response = await window.ethereum.request(\r\n        { \r\n          method: 'eth_requestAccounts'\r\n        }\r\n      ).then(res => {\r\n        let walletAddress = res[0];\r\n        console.log(\"res: \" + JSON.stringify(res));\r\n        this.setState({ walletAddress:walletAddress })\r\n      });\r\n    } else {\r\n      window.open('https://metamask.io/')\r\n    }\r\n  };\r\n\r\n  // aaa = async = () => {\r\n  //   // ethereum.on('connect', handler: (connectInfo: ConnectInfo) => void);\r\n  // }\r\n  \r\n  // API function end\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from 'react';\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Form from \"react-bootstrap/Form\";\r\n\r\n// font-awesome\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faCheckCircle } from \"@fortawesome/free-regular-svg-icons\";\r\nimport { faTimesCircle } from \"@fortawesome/free-regular-svg-icons\";\r\nimport { faTrashAlt } from \"@fortawesome/free-regular-svg-icons\";\r\nimport { faEdit } from \"@fortawesome/free-regular-svg-icons\";\r\nimport { faTasks } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport Constant from \"../../global/Constant.json\";\r\n\r\nclass ModalSuccess extends Component {\r\n\r\n  // <SuccessModal\r\n  // show={this.state.successModalShow}\r\n  // onHide={() => this.setState({ successModalShow: false })}\r\n  // />\r\n  render() {\r\n    return (\r\n      <Modal\r\n        size=\"sm\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n        show={this.props.modalSuccessForm.modalShow}\r\n      >\r\n        {/* <Modal.Header closeButton>\r\n          <Modal.Title id=\"contained-modal-title-vcenter\">\r\n            Using Grid in Modal\r\n          </Modal.Title>\r\n        </Modal.Header> */}\r\n        <Modal.Body className=\"show-grid\">\r\n          <Container fluid className=\"text-center m-2\">\r\n            <Row>\r\n              <Col>\r\n                <FontAwesomeIcon\r\n                  icon={faCheckCircle}\r\n                  size=\"3x\"\r\n                  className=\"mb-3 text-success\"\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col>\r\n                <h4>Success</h4>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col>\r\n                <p>{this.props.modalSuccessForm.successMsg}</p>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col>\r\n                <Button\r\n                  variant=\"success\"\r\n                  onClick={() => \r\n                    this.props.dynamicSetForm(Constant.modalSuccessForm, Constant.modalShow, false)}\r\n                  className=\"rounded-pill width-100p\"\r\n                >\r\n                  Close\r\n                </Button>\r\n              </Col>\r\n            </Row>\r\n          </Container>\r\n        </Modal.Body>\r\n      </Modal>\r\n    );\r\n  }\r\n  \r\n};\r\nexport default ModalSuccess;","import React, { Component } from 'react';\r\n\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\n// font-awesome\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTimesCircle } from \"@fortawesome/free-regular-svg-icons\";\r\n\r\nimport Constant from \"../../global/Constant.json\";\r\n\r\nclass ModalFailed extends Component {\r\n  render() {\r\n    return (\r\n      <Modal\r\n        size=\"sm\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n        show={this.props.modalFailedForm.modalShow}\r\n      >\r\n       \r\n        <Modal.Body className=\"show-grid\">\r\n          <Container fluid className=\"text-center m-2\">\r\n            <Row>\r\n              <Col>\r\n                <FontAwesomeIcon\r\n                  icon={faTimesCircle}\r\n                  size=\"3x\"\r\n                  className=\"mb-3 text-danger\"\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col>\r\n                <h4>Failed</h4>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col>\r\n                <p>{this.props.modalFailedForm.errMsg}</p>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col>\r\n                <Button\r\n                  variant=\"danger\"\r\n                  onClick={() => \r\n                    this.props.dynamicSetForm(Constant.modalFailedForm, Constant.modalShow, false)}\r\n                  className=\"rounded-pill width-100p\"\r\n                >\r\n                  Close\r\n                </Button>\r\n              </Col>\r\n            </Row>\r\n          </Container>\r\n        </Modal.Body>\r\n      </Modal>\r\n    );\r\n  }\r\n};\r\nexport default ModalFailed;","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport Constant from \"../../global/Constant.json\";\r\nimport Media from 'react-media';\r\n\r\n// import { WagmiConfig, createClient } from \"wagmi\";\r\n// import { ConnectKitProvider, ConnectKitButton, getDefaultClient } from \"connectkit\";\r\n\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nimport ModalSuccess from \"../../layouts/modal/ModalSuccess\";\r\nimport ModalFailed from \"../../layouts/modal/ModalFailed\";\r\n\r\nclass StackView extends Component {\r\n  state = {\r\n    accountInfo: {\r\n      availableCandy: 12,\r\n      stakedCandy: 0,\r\n      staked: false,\r\n      stakedDays: 0,\r\n    },\r\n\r\n    nftInfoList: [\r\n      {isPlaced: false, numCandy: 0,},      \r\n    ],\r\n\r\n    modalSuccessForm: {\r\n      modalShow: false,\r\n    },\r\n\r\n    modalFailedForm: {\r\n      modalShow: false,\r\n      errMsg: \"\",\r\n    },\r\n  };\r\n\r\n  componentDidMount() {\r\n    // this.apiConnectWallet();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"bg-orange row-height-100vh\">\r\n        <ModalSuccess\r\n          modalSuccessForm={this.state.modalSuccessForm}\r\n          dynamicSetForm={this.dynamicSetForm}\r\n        />\r\n\r\n        <ModalFailed\r\n          modalFailedForm={this.state.modalFailedForm}\r\n          dynamicSetForm={this.dynamicSetForm}\r\n        />\r\n\r\n        {/* <Container fluid>\r\n          <WagmiConfig client={() => this.client()}>\r\n            <ConnectKitProvider>\r\n              <p>AAA</p>\r\n              <ConnectKitButton />\r\n            </ConnectKitProvider>\r\n          </WagmiConfig>\r\n        </Container> */}\r\n        \r\n        <Container fluid className=\"\">\r\n          <br/>\r\n          <br/>\r\n          <br/>\r\n          <Row className=\"p-2\">\r\n            {this.layoutDynamicCandyBox()}\r\n          </Row>\r\n          <br/>\r\n          <Row>\r\n            <Col style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n            {(this.state.accountInfo.staked) ? \r\n              <Button\r\n                className=\"\"\r\n                variant=\"secondary\"\r\n                size=\"lg\"\r\n                onClick={() => this.actionMintZombie()}\r\n              >\r\n              Mint Zombie Birds\r\n              </Button> : \r\n              <Button\r\n                className=\"\"\r\n                variant=\"secondary\"\r\n                size=\"lg\"\r\n                onClick={() => this.actionStack()}\r\n              >\r\n              Stack\r\n              </Button>} \r\n            </Col>\r\n          </Row>\r\n          <br/>\r\n          <Row>\r\n              <Col style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n                {(this.state.accountInfo.staked) ? \r\n                <h5 className=\"font-weight-bold\"\r\n                  onClick={() => this.setAccountInfo(\"stakedDays\", this.state.accountInfo.stakedDays + 10)}>\r\n                  Days Staked : {this.state.accountInfo.stakedDays}\r\n                </h5> : \r\n                <h5 className=\"font-weight-bold\">\r\n                  Candies Available : {this.state.accountInfo.availableCandy}\r\n                </h5>}\r\n                \r\n              </Col>\r\n          </Row>\r\n          {/* </Row> */}\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Layout function\r\n  mediaController = () => {\r\n    return (\r\n      <Media\r\n          queries={{\r\n            sm: \"(max-width: 767px)\",\r\n            md: \"(min-width: 768px) and (max-width: 991px)\",\r\n            lg: \"(min-width: 992px)\",\r\n          }}\r\n        >\r\n          {(matches) => \r\n          \r\n            matches.sm ? (\r\n              <></>\r\n            ) :\r\n            matches.md ? (\r\n              <></>\r\n            ) :\r\n            matches.lg ? (\r\n              <></>\r\n            ) : (\r\n              <></>\r\n            )\r\n            \r\n          }\r\n        </Media>\r\n    )\r\n  }\r\n\r\n  layoutDynamicCandyBox = () => {\r\n\r\n    let nftInfoList = [...this.state.nftInfoList];\r\n    return (\r\n      <>\r\n        {nftInfoList.map((value, index) => (\r\n            <>\r\n              \r\n              {(index == 0) ? <Col sm={2}/> : <></>}\r\n              {value.isPlaced ? \r\n              <Col sm={4} lg={2}>\r\n                <div className=\"p-2 m-1 height-20vh bg-none border-2-black border-radius-10 d-flex align-items-center justify-content-center\">\r\n                  <img className=\"height-10vh\"\r\n                    src={\r\n                      process.env.PUBLIC_URL +\r\n                      \"/assets/candy.png\"\r\n                    }\r\n                  />\r\n                  <h5>x{value.numCandy}</h5>\r\n                </div>\r\n              </Col> :\r\n              <Col sm={4} lg={2}>\r\n                <div className=\"p-2 m-1 height-20vh bg-none border-2-black border-radius-10 d-flex align-items-center justify-content-center\"\r\n                  onClick={() => this.actionCandyPlace(index)}>\r\n                  <div className=\"text-center\">\r\n                    <h3>Click To Place Candy</h3>\r\n                  </div>\r\n                </div>\r\n              </Col>\r\n              }\r\n              \r\n              {(index % 4 == 3) ? <Col sm={2}/> : <></>}\r\n              {(index % 4 == 3) ? <Col sm={2}/> : <></>}\r\n\r\n              {(!this.state.accountInfo.staked && nftInfoList.length -1 == index) ? \r\n              <Col sm={4} lg={2}>\r\n                <div className=\"p-2 m-1 height-20vh bg-none border-2-black border-radius-10 d-flex align-items-center justify-content-center\"\r\n                  onClick={() => this.actionAddNewNftInfoObject()}>\r\n                  <span>+</span>\r\n                </div>\r\n              </Col> :\r\n              <></>}\r\n            </>\r\n          ))\r\n        }\r\n      </>\r\n    )\r\n  }\r\n  // Layout function end\r\n\r\n  // API function\r\n  apiConnectWallet = async () => {\r\n    return await window.ethereum.request({ method: 'eth_requestAccounts'});\r\n  };\r\n  \r\n  // API function end\r\n\r\n  // client = () => {\r\n  //   return createClient(\r\n  //     getDefaultClient({\r\n  //       appName: \"Your App Name\",\r\n  //       alchemyId : \"YFyUn5aMEN_vSH49eewewAxQcIaE2V6s\",\r\n  //     }),\r\n  //   );\r\n  // } \r\n\r\n  setAccountInfo = (type, value) => {\r\n    console.log(\"setAccountInfo\");\r\n    console.log(\"type: \" + type);\r\n    console.log(\"value: \" + value);\r\n\r\n    // switch(type) {\r\n    //   case \"numImage\": {\r\n    //     value = (value < 4) ? value : this.state.stakeInfo.numImageAvailable;\r\n    //   };\r\n    //   break;\r\n    // }\r\n\r\n    this.setState(\r\n      {\r\n        accountInfo: {\r\n          ...this.state.accountInfo,\r\n          [type]: value,\r\n        },\r\n      },\r\n\r\n      console.log(\r\n        \"accountInfo: \" + JSON.stringify(this.state.accountInfo)\r\n      )\r\n    );\r\n  };\r\n\r\n  dynamicSetForm = (formObject, type, value) => {\r\n    console.log(\"dynamicSetForm\");\r\n    console.log(\"type: \" + type);\r\n\r\n    this.setState(\r\n      {\r\n        [formObject]: {\r\n          ...this.state[formObject],\r\n          [type]: value,\r\n        },\r\n      },\r\n      () => {\r\n        console.log(\r\n          \"dynamicSetForm: \" + formObject + \" \" + JSON.stringify(this.state[formObject])\r\n        );\r\n      }\r\n    );\r\n  };\r\n\r\n  actionCandyPlace = (index) => {\r\n    let nftInfoList = [...this.state.nftInfoList];\r\n    let accountInfo = {...this.state.accountInfo};\r\n\r\n    if (accountInfo.availableCandy - 4 >= 0) {\r\n      nftInfoList[index] = { ...nftInfoList[index], isPlaced: true, numCandy: 4 };\r\n\r\n      accountInfo = {...accountInfo, \r\n        availableCandy: accountInfo.availableCandy - 4,\r\n        stakedCandy: accountInfo.stakedCandy + 4,\r\n      }\r\n\r\n      this.setState({ \r\n          nftInfoList: nftInfoList, \r\n          accountInfo: accountInfo, \r\n        }\r\n      )\r\n    } else {\r\n      this.setState({\r\n        modalFailedForm: {\r\n          ...this.state.modalFailedForm,\r\n          modalShow: true,\r\n          errMsg: \"Insufficient Candies to be placed. 4 candies are required in order to place.\"\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  actionAddNewNftInfoObject = () => {\r\n    let nftInfoList = [...this.state.nftInfoList];\r\n\r\n    let lastObject = nftInfoList[nftInfoList.length -1];\r\n\r\n    if (!lastObject.isPlaced) {\r\n      // alert\r\n      this.setState({\r\n        modalFailedForm: {\r\n          ...this.state.modalFailedForm,\r\n          modalShow: true,\r\n          errMsg: \"Please place candy before add a new candy box.\"\r\n        }\r\n      })\r\n    } else {\r\n      // add new object\r\n      let object = {\r\n        isPlaced: false, \r\n        numCandy: 0\r\n      };\r\n  \r\n      nftInfoList = nftInfoList.concat(object);\r\n      this.setState(\r\n        { nftInfoList: nftInfoList }\r\n      )\r\n    }\r\n\r\n    \r\n  }\r\n\r\n  actionStack = () => {\r\n    let accountInfo = this.state.accountInfo;\r\n\r\n    if (accountInfo.stakedCandy < 4) {\r\n      this.setState({\r\n        modalFailedForm: {\r\n          ...this.state.modalFailedForm,\r\n          modalShow: true,\r\n          errMsg: \"Insufficient Candies to be staked. 4 candies are required in order to stake.\"\r\n        }\r\n      })\r\n    } else {\r\n      let nftInfoList = [...this.state.nftInfoList];\r\n      let lastObject = nftInfoList[nftInfoList.length - 1];\r\n\r\n      if (!lastObject.isPlaced) {\r\n        nftInfoList = nftInfoList.splice(0, nftInfoList.length -1);\r\n      }\r\n\r\n      this.setState({\r\n        modalSuccessForm: {\r\n          ...this.state.modalSuccessForm,\r\n          modalShow: true,\r\n          successMsg: \"Successfully staked Candies\"\r\n        },\r\n        accountInfo: {\r\n          ...this.state.accountInfo,\r\n          staked: true,\r\n        },\r\n        nftInfoList : nftInfoList,        \r\n      })\r\n    }\r\n  }\r\n\r\n  actionMintZombie = () => {\r\n    let accountInfo = this.state.accountInfo;\r\n\r\n    if (accountInfo.stakedDays < 30) {\r\n      this.setState({\r\n        modalFailedForm: {\r\n          ...this.state.modalFailedForm,\r\n          modalShow: true,\r\n          errMsg: \"Candies need to be staked for 30 days.\"\r\n        }\r\n      })\r\n    } else {\r\n      // this.setState({\r\n      //   modalSuccessForm: {\r\n      //     ...this.state.modalSuccessForm,\r\n      //     modalShow: true,\r\n      //     successMsg: \"Successfully staked Candies\"\r\n      //   },\r\n      //   stakeInfo: {\r\n      //     ...this.state.stakeInfo,\r\n      //     staked: true,\r\n      //   },\r\n        \r\n      // })\r\n    }\r\n  }\r\n}\r\n\r\nexport default StackView;\r\n","import React, { Component } from \"react\";\n// import logo from \"./logo.svg\";\nimport \"./App.css\";\n// import i18n from \"./locales/i18n.js\";\nimport { withNamespaces } from \"react-i18next\";\n\n// react-router-dom\nimport { BrowserRouter, Switch, Route, Redirect } from \"react-router-dom\";\n\nimport Header from \"./components/header/Header\";\nimport StackView from \"./components/stack/StackView\";\n\nclass App extends Component {\n  render() {\n    // const { t } = this.props;\n\n    return (\n      <BrowserRouter basename=\"reactjs-nftStackingWeb\">\n        <header>\n          <Header />\n        </header>\n\n        <Switch>\n          <Route path=\"/v1/stack/view\" component={StackView} />\n\n          <Redirect to=\"/v1/stack/view\" component={StackView} />\n        </Switch>\n\n        {/* footer bar */}\n        <footer>\n          {/* <Footer /> */}\n        </footer>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default withNamespaces()(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import i18n from \"i18next\";\r\nimport { reactI18nextModule } from \"react-i18next\";\r\n\r\nimport string_en from \"../locales/en.json\";\r\nimport string_cn_simp from \"../locales/cn-simp.json\";\r\nimport string_cn_trad from \"../locales/cn-tran.json\";\r\n\r\n// the translations\r\nconst resources = {\r\n  en: {\r\n    translation: string_en,\r\n  },\r\n  cn_simp: {\r\n    translation: string_cn_simp,\r\n  },\r\n  cn_trad: {\r\n    translation: string_cn_trad,\r\n  },\r\n};\r\n\r\ni18n\r\n  .use(reactI18nextModule) // passes i18n down to react-i18next\r\n  .init({\r\n    resources,\r\n    lng: \"en\",\r\n\r\n    keySeparator: false, // we do not use keys in form messages.welcome\r\n\r\n    interpolation: {\r\n      escapeValue: false, // react already safes from xss\r\n    },\r\n  });\r\n\r\nexport default i18n;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./locales/i18n\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./global/Global.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
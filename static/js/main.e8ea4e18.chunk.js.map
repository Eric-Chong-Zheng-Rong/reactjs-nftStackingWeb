{"version":3,"sources":["components/header/Header.js","layouts/modal/ModalSuccess.js","layouts/modal/ModalFailed.js","components/stack/StackView.js","App.js","serviceWorker.js","locales/i18n.js","index.js"],"names":["Header","className","Navbar","collapseOnSelect","expand","Container","fluid","Brand","as","Link","to","Form","Badge","Component","ModalSuccess","Modal","size","aria-labelledby","centered","show","this","props","modalSuccessForm","modalShow","Body","Row","Col","icon","faCheckCircle","successMsg","Button","variant","onClick","dynamicSetForm","Constant","ModalFailed","modalFailedForm","faTimesCircle","errMsg","StackView","state","stakeInfo","numImage","numImageAvailable","staked","stakedDays","apiConnectWallet","a","window","ethereum","request","method","setStakeInfo","type","value","console","log","setState","JSON","stringify","formObject","actionStack","actionMintZombie","style","display","justifyContent","sm","lg","height","src","process","App","path","component","withNamespaces","Boolean","location","hostname","match","resources","en","translation","cn_simp","cn_trad","i18n","use","reactI18nextModule","init","lng","keySeparator","interpolation","escapeValue","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e8ea4e18.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Badge from \"react-bootstrap/Badge\";\r\nimport Navbar from \"react-bootstrap/Navbar\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass Header extends Component {\r\n  \r\n  render() {\r\n    return (\r\n      <div className=\"\">\r\n        <Navbar collapseOnSelect expand=\"lg\" className=\"navbar-bg-orange navbar-height\" >\r\n          <Container fluid>\r\n            <Navbar.Brand as={Link} to=\"/\">\r\n              <h3>Spooky Birds</h3>\r\n            </Navbar.Brand>\r\n            \r\n            <Form className=\"\">            \r\n              <Badge className=\"badge-bg-gray-8 font-size-1\">0x32r2……23gd</Badge>\r\n            </Form>\r\n          </Container>\r\n        </Navbar>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from 'react';\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Form from \"react-bootstrap/Form\";\r\n\r\n// font-awesome\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faCheckCircle } from \"@fortawesome/free-regular-svg-icons\";\r\nimport { faTimesCircle } from \"@fortawesome/free-regular-svg-icons\";\r\nimport { faTrashAlt } from \"@fortawesome/free-regular-svg-icons\";\r\nimport { faEdit } from \"@fortawesome/free-regular-svg-icons\";\r\nimport { faTasks } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport Constant from \"../../global/Constant.json\";\r\n\r\nclass ModalSuccess extends Component {\r\n\r\n  // <SuccessModal\r\n  // show={this.state.successModalShow}\r\n  // onHide={() => this.setState({ successModalShow: false })}\r\n  // />\r\n  render() {\r\n    return (\r\n      <Modal\r\n        size=\"sm\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n        show={this.props.modalSuccessForm.modalShow}\r\n      >\r\n        {/* <Modal.Header closeButton>\r\n          <Modal.Title id=\"contained-modal-title-vcenter\">\r\n            Using Grid in Modal\r\n          </Modal.Title>\r\n        </Modal.Header> */}\r\n        <Modal.Body className=\"show-grid\">\r\n          <Container fluid className=\"text-center m-2\">\r\n            <Row>\r\n              <Col>\r\n                <FontAwesomeIcon\r\n                  icon={faCheckCircle}\r\n                  size=\"3x\"\r\n                  className=\"mb-3 text-success\"\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col>\r\n                <h4>Success</h4>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col>\r\n                <p>{this.props.modalSuccessForm.successMsg}</p>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col>\r\n                <Button\r\n                  variant=\"success\"\r\n                  onClick={() => \r\n                    this.props.dynamicSetForm(Constant.modalSuccessForm, Constant.modalShow, false)}\r\n                  className=\"rounded-pill width-100p\"\r\n                >\r\n                  Close\r\n                </Button>\r\n              </Col>\r\n            </Row>\r\n          </Container>\r\n        </Modal.Body>\r\n      </Modal>\r\n    );\r\n  }\r\n  \r\n};\r\nexport default ModalSuccess;","import React, { Component } from 'react';\r\n\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\n// font-awesome\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTimesCircle } from \"@fortawesome/free-regular-svg-icons\";\r\n\r\nimport Constant from \"../../global/Constant.json\";\r\n\r\nclass ModalFailed extends Component {\r\n  render() {\r\n    return (\r\n      <Modal\r\n        size=\"sm\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n        show={this.props.modalFailedForm.modalShow}\r\n      >\r\n       \r\n        <Modal.Body className=\"show-grid\">\r\n          <Container fluid className=\"text-center m-2\">\r\n            <Row>\r\n              <Col>\r\n                <FontAwesomeIcon\r\n                  icon={faTimesCircle}\r\n                  size=\"3x\"\r\n                  className=\"mb-3 text-danger\"\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col>\r\n                <h4>Failed</h4>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col>\r\n                <p>{this.props.modalFailedForm.errMsg}</p>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col>\r\n                <Button\r\n                  variant=\"danger\"\r\n                  onClick={() => \r\n                    this.props.dynamicSetForm(Constant.modalFailedForm, Constant.modalShow, false)}\r\n                  className=\"rounded-pill width-100p\"\r\n                >\r\n                  Close\r\n                </Button>\r\n              </Col>\r\n            </Row>\r\n          </Container>\r\n        </Modal.Body>\r\n      </Modal>\r\n    );\r\n  }\r\n};\r\nexport default ModalFailed;","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport Constant from \"../../global/Constant.json\";\r\n\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nimport ModalSuccess from \"../../layouts/modal/ModalSuccess\";\r\nimport ModalFailed from \"../../layouts/modal/ModalFailed\";\r\n\r\nclass StackView extends Component {\r\n  state = {\r\n    stakeInfo: {\r\n      numImage: 0,\r\n      numImageAvailable: 4,\r\n      staked: false,\r\n      stakedDays: 0,\r\n    },\r\n\r\n    modalSuccessForm: {\r\n      modalShow: false,\r\n    },\r\n\r\n    modalFailedForm: {\r\n      modalShow: false,\r\n      errMsg: \"\",\r\n    },\r\n  };\r\n\r\n  componentDidMount() {\r\n    // this.apiConnectWallet();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <ModalSuccess\r\n          modalSuccessForm={this.state.modalSuccessForm}\r\n          dynamicSetForm={this.dynamicSetForm}\r\n        />\r\n\r\n        <ModalFailed\r\n          modalFailedForm={this.state.modalFailedForm}\r\n          dynamicSetForm={this.dynamicSetForm}\r\n        />\r\n        \r\n        <Container fluid className=\"bg-orange row-height-100vh\">\r\n          {/* <Row className=\"\"> */}\r\n            {/* <Row className=\"d-flex align-items-center justify-content-center\"> */}\r\n          <br/>\r\n          <br/>\r\n          <br/>\r\n          <Row>\r\n            <Col style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n              {/* {this.layoutPagination()} */}\r\n              <Col sm={4} lg={2} className=\"m-2 p-2 bg-none border-2-black border-radius-10\">\r\n\r\n                <Col \r\n                  className=\"height-20vh d-flex align-items-center justify-content-center\"\r\n                  onClick={() => this.setStakeInfo(\"numImage\", this.state.stakeInfo.numImage + 1)}\r\n                >\r\n                  <img\r\n                    height={150}\r\n                    src={\r\n                      process.env.PUBLIC_URL +\r\n                      \"/assets/candy.png\"\r\n                    }\r\n                  />\r\n                  <h5>x{this.state.stakeInfo.numImage}</h5>\r\n                </Col>\r\n                \r\n              </Col>\r\n              <Col sm={4} lg={2} className=\"m-2 p-2 bg-none border-2-black border-radius-10\">\r\n                <Col className=\"height-20vh d-flex align-items-center justify-content-center\">\r\n                  <span>+</span>\r\n                </Col>\r\n              </Col>\r\n              \r\n            </Col>\r\n          </Row>          \r\n          <br/>\r\n          <Row>\r\n            <Col style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n            {(this.state.stakeInfo.staked) ? \r\n              <Button\r\n                className=\"\"\r\n                variant=\"secondary\"\r\n                size=\"lg\"\r\n                onClick={() => this.actionMintZombie()}\r\n              >\r\n              Mint Zombie Birds\r\n              </Button> : \r\n              <Button\r\n                className=\"\"\r\n                variant=\"secondary\"\r\n                size=\"lg\"\r\n                onClick={() => this.actionStack()}\r\n              >\r\n              Stack\r\n              </Button>}\r\n              \r\n            </Col>\r\n          </Row>\r\n          <br/>\r\n          <Row>\r\n              <Col style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n                {(this.state.stakeInfo.staked) ? \r\n                <h5 className=\"font-weight-bold\"\r\n                  onClick={() => this.setStakeInfo(\"stakedDays\", this.state.stakeInfo.stakedDays + 10)}>\r\n                  Days Staked : {this.state.stakeInfo.stakedDays}\r\n                </h5> : \r\n                <h5 className=\"font-weight-bold\">\r\n                  Candies Available : {this.state.stakeInfo.numImageAvailable}\r\n                </h5>}\r\n                \r\n              </Col>\r\n          </Row>\r\n          {/* </Row> */}\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Layout function\r\n\r\n  // Layout function end\r\n\r\n  // API function\r\n  apiConnectWallet = async () => {\r\n    return await window.ethereum.request({ method: 'eth_requestAccounts'});\r\n  };\r\n  \r\n  // API function end\r\n\r\n  setStakeInfo = (type, value) => {\r\n    console.log(\"setStakeInfo\");\r\n    console.log(\"type: \" + type);\r\n    console.log(\"value: \" + value);\r\n\r\n    switch(type) {\r\n      case \"numImage\": {\r\n        value = (value < 4) ? value : this.state.stakeInfo.numImageAvailable;\r\n      };\r\n      break;\r\n    }\r\n\r\n    this.setState(\r\n      {\r\n        stakeInfo: {\r\n          ...this.state.stakeInfo,\r\n          [type]: value,\r\n        },\r\n      },\r\n\r\n      console.log(\r\n        \"stakeInfo: \" + JSON.stringify(this.state.stakeInfo)\r\n      )\r\n    );\r\n  };\r\n\r\n  dynamicSetForm = (formObject, type, value) => {\r\n    console.log(\"dynamicSetForm\");\r\n    console.log(\"type: \" + type);\r\n\r\n    this.setState(\r\n      {\r\n        [formObject]: {\r\n          ...this.state[formObject],\r\n          [type]: value,\r\n        },\r\n      },\r\n      () => {\r\n        console.log(\r\n          \"dynamicSetForm: \" + formObject + \" \" + JSON.stringify(this.state[formObject])\r\n        );\r\n      }\r\n    );\r\n  };\r\n\r\n  actionStack = () => {\r\n    let stackInfo = this.state.stakeInfo;\r\n\r\n    if (stackInfo.numImage < 4) {\r\n      this.setState({\r\n        modalFailedForm: {\r\n          ...this.state.modalFailedForm,\r\n          modalShow: true,\r\n          errMsg: \"Insufficient Candies to be staked. 4 candies are required in order to stake.\"\r\n        }\r\n      })\r\n    } else {\r\n      this.setState({\r\n        modalSuccessForm: {\r\n          ...this.state.modalSuccessForm,\r\n          modalShow: true,\r\n          successMsg: \"Successfully staked Candies\"\r\n        },\r\n        stakeInfo: {\r\n          ...this.state.stakeInfo,\r\n          staked: true,\r\n        },\r\n        \r\n      })\r\n      // this.setStakeInfo(\"staked\", true);\r\n    }\r\n  }\r\n\r\n  actionMintZombie = () => {\r\n    let stackInfo = this.state.stakeInfo;\r\n\r\n    if (stackInfo.stakedDays < 30) {\r\n      this.setState({\r\n        modalFailedForm: {\r\n          ...this.state.modalFailedForm,\r\n          modalShow: true,\r\n          errMsg: \"Candies need to be staked for 30 days.\"\r\n        }\r\n      })\r\n    } else {\r\n      // this.setState({\r\n      //   modalSuccessForm: {\r\n      //     ...this.state.modalSuccessForm,\r\n      //     modalShow: true,\r\n      //     successMsg: \"Successfully staked Candies\"\r\n      //   },\r\n      //   stakeInfo: {\r\n      //     ...this.state.stakeInfo,\r\n      //     staked: true,\r\n      //   },\r\n        \r\n      // })\r\n    }\r\n  }\r\n}\r\n\r\nexport default StackView;\r\n","import React, { Component } from \"react\";\n// import logo from \"./logo.svg\";\nimport \"./App.css\";\n// import i18n from \"./locales/i18n.js\";\nimport { withNamespaces } from \"react-i18next\";\n\n// react-router-dom\nimport { BrowserRouter, Switch, Route, Redirect } from \"react-router-dom\";\n\nimport Header from \"./components/header/Header\";\nimport StackView from \"./components/stack/StackView\";\n\nclass App extends Component {\n  render() {\n    // const { t } = this.props;\n\n    return (\n      <BrowserRouter>\n        <header>\n          <Header />\n        </header>\n\n        <Switch>\n          <Route path=\"/v1/stack/view\" component={StackView} />\n\n          <Redirect to=\"/v1/stack/view\" component={StackView} />\n        </Switch>\n\n        {/* footer bar */}\n        <footer>\n          {/* <Footer /> */}\n        </footer>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default withNamespaces()(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import i18n from \"i18next\";\r\nimport { reactI18nextModule } from \"react-i18next\";\r\n\r\nimport string_en from \"../locales/en.json\";\r\nimport string_cn_simp from \"../locales/cn-simp.json\";\r\nimport string_cn_trad from \"../locales/cn-tran.json\";\r\n\r\n// the translations\r\nconst resources = {\r\n  en: {\r\n    translation: string_en,\r\n  },\r\n  cn_simp: {\r\n    translation: string_cn_simp,\r\n  },\r\n  cn_trad: {\r\n    translation: string_cn_trad,\r\n  },\r\n};\r\n\r\ni18n\r\n  .use(reactI18nextModule) // passes i18n down to react-i18next\r\n  .init({\r\n    resources,\r\n    lng: \"en\",\r\n\r\n    keySeparator: false, // we do not use keys in form messages.welcome\r\n\r\n    interpolation: {\r\n      escapeValue: false, // react already safes from xss\r\n    },\r\n  });\r\n\r\nexport default i18n;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./locales/i18n\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./global/Global.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}